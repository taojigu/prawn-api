#name: Deploy to aws test
#
#on:
#  workflow_run:
#    workflows: ["Label to docker develop"]
#    types:
#      - completed

name: direct-to-ec2
on:
  pull_request:
    types: [labeled]
    branch:
      - 'develop*'
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      should_run_jobs: ${{ github.event.label.name == 'cd to aws test'}} # && github.event.pull_request.merged == true }}
    steps:
      - name: Check if jobs should run
        run: echo "Evaluated conditions ..."

  ci-develop-docker:
    needs: setup
    if: needs.setup.outputs.should_run_jobs == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # Step 4: Archive the JAR file
      - name: Archive the JAR file
        run: |
          mkdir -p build && cp target/*.jar build/

      # Step 5: Set up SSH for deployment
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 6: Copy JAR file to EC2 instance
      - name: Deploy to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa build/*.jar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.API_APP_PATH }}/app.jar

      # Step 7: Restart the application on EC2
      - name: Restart application on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            sudo pkill -f app.jar || true
            nohup java -jar ${APP_PATH}/app.jar > /dev/null 2>&1 &
          EOF